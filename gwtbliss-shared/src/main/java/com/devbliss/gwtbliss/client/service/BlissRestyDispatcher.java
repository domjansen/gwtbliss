/*
 * Copyright 2013, devbliss GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.devbliss.gwtbliss.client.service;

import com.google.gwt.inject.client.binder.GinScopedBindingBuilder;

import org.fusesource.restygwt.client.Defaults;
import org.fusesource.restygwt.client.Dispatcher;
import org.fusesource.restygwt.client.callback.CallbackFactory;
import org.fusesource.restygwt.client.callback.DefaultCallbackFactory;
import org.fusesource.restygwt.client.dispatcher.DefaultDispatcherFilter;
import org.fusesource.restygwt.client.dispatcher.DefaultFilterawareDispatcher;
import org.fusesource.restygwt.client.dispatcher.DispatcherFilter;

/**
 * The application's custom Resty {@link Dispatcher} setup.
 *
 * <p>
 * Bind it with {@link GinScopedBindingBuilder#asEagerSingleton()} because it should never be
 * initialized lazy and should be bound before any other service/resty stuff gets executed.
 * </p>
 *
 * @author <a href="mailto:jb@barop.de">Johannes Barop</a>
 *
 */
public final class BlissRestyDispatcher extends DefaultFilterawareDispatcher {

  /**
   * Provides the {@link BlissRestyDispatcher} and set it as default Resty {@link Dispatcher}.
   */
  public static class Provider implements com.google.inject.Provider<Dispatcher> {
    @Override
    public Dispatcher get() {
      final Dispatcher dispatcher = new BlissRestyDispatcher();
      Defaults.setDispatcher(dispatcher);
      return dispatcher;
    }
  }

  /**
   * Dispatcher configuration.
   *
   * <p>
   * Use the {@link #defaultDispatcherFilter} to create a {@link Dispatcher}.
   * </p>
   *
   * <p>
   * This is encapsulated here for the sake of readability and because Java cannot references
   * instance variables in the constructor.
   * </p>
   *
   * TODO: make list of callback and dispatcher filter injectable
   */
  private static final class DispatcherConfig {
    final CallbackFactory callbackFactory = new DefaultCallbackFactory(new UnparsableCruftCallbackFilter());
    final DispatcherFilter defaultDispatcherFilter = new DefaultDispatcherFilter(callbackFactory);
  }

  /**
   * Hidden Constructor.
   *
   * Instances of this class should only generated by {@link Provider#get()}.
   */
  private BlissRestyDispatcher() {
    super(new DispatcherConfig().defaultDispatcherFilter);
  }

}
